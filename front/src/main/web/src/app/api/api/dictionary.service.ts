/**
 * i18n Tool
 * Web API of the i18n tool
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { DictionaryEntryCreationDto } from '../model/dictionaryEntryCreationDto';
import { DictionaryEntryDto } from '../model/dictionaryEntryDto';
import { DictionaryEntryPatchDto } from '../model/dictionaryEntryPatchDto';
import { ErrorMessagesDto } from '../model/errorMessagesDto';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class DictionaryService {
  protected basePath = 'http://127.0.0.1:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Creates a new entry.
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public create3(
    body: DictionaryEntryCreationDto,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DictionaryEntryDto>;
  public create3(
    body: DictionaryEntryCreationDto,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DictionaryEntryDto>>;
  public create3(
    body: DictionaryEntryCreationDto,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DictionaryEntryDto>>;
  public create3(
    body: DictionaryEntryCreationDto,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling create3.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<DictionaryEntryDto>('post', `${this.basePath}/api/dictionary`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Delete an entry.
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public delete4(id: string, observe?: 'body', reportProgress?: boolean): Observable<DictionaryEntryDto>;
  public delete4(
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DictionaryEntryDto>>;
  public delete4(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DictionaryEntryDto>>;
  public delete4(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling delete4.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DictionaryEntryDto>(
      'delete',
      `${this.basePath}/api/dictionary/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete all entries.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteAll(observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteAll(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('delete', `${this.basePath}/api/dictionary`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Exports the dictionary to a CSV file.
   *
   * @param action
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public exportDictionary(action?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public exportDictionary(
    action?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Blob>>;
  public exportDictionary(action?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public exportDictionary(action?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (action !== undefined && action !== null) {
      queryParameters = queryParameters.set('action', <any>action);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*', 'text/csv'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request('get', `${this.basePath}/api/dictionary/do`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
      responseType: 'blob',
    });
  }

  /**
   * Finds the dictionary entry having the specified id.
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findById4(id: string, observe?: 'body', reportProgress?: boolean): Observable<DictionaryEntryDto>;
  public findById4(
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DictionaryEntryDto>>;
  public findById4(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DictionaryEntryDto>>;
  public findById4(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findById4.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DictionaryEntryDto>(
      'get',
      `${this.basePath}/api/dictionary/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Imports the dictionary from the CSV file.
   *
   * @param body
   * @param action
   * @param persist Persist the import, or just parse it
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public importDictionary(
    body?: Object,
    action?: string,
    persist?: boolean,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<DictionaryEntryDto>>;
  public importDictionary(
    body?: Object,
    action?: string,
    persist?: boolean,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<DictionaryEntryDto>>>;
  public importDictionary(
    body?: Object,
    action?: string,
    persist?: boolean,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<DictionaryEntryDto>>>;
  public importDictionary(
    body?: Object,
    action?: string,
    persist?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (action !== undefined && action !== null) {
      queryParameters = queryParameters.set('action', <any>action);
    }
    if (persist !== undefined && persist !== null) {
      queryParameters = queryParameters.set('persist', <any>persist);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['text/csv'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Array<DictionaryEntryDto>>('put', `${this.basePath}/api/dictionary/do`, {
      body: body,
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Retrieves dictionary entries.
   *
   * @param text Text to search for
   * @param textLocaleId ID of the locale in which the specified text is written
   * @param sortLocaleId ID of the locale of translations to sort on
   * @param sortAscending Flag indicating whether the sorting is ascending (or descending).
   * @param localeId ID of the locales
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public search(
    text?: string,
    textLocaleId?: string,
    sortLocaleId?: string,
    sortAscending?: boolean,
    localeId?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<DictionaryEntryDto>>;
  public search(
    text?: string,
    textLocaleId?: string,
    sortLocaleId?: string,
    sortAscending?: boolean,
    localeId?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<DictionaryEntryDto>>>;
  public search(
    text?: string,
    textLocaleId?: string,
    sortLocaleId?: string,
    sortAscending?: boolean,
    localeId?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<DictionaryEntryDto>>>;
  public search(
    text?: string,
    textLocaleId?: string,
    sortLocaleId?: string,
    sortAscending?: boolean,
    localeId?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (text !== undefined && text !== null) {
      queryParameters = queryParameters.set('text', <any>text);
    }
    if (textLocaleId !== undefined && textLocaleId !== null) {
      queryParameters = queryParameters.set('textLocaleId', <any>textLocaleId);
    }
    if (sortLocaleId !== undefined && sortLocaleId !== null) {
      queryParameters = queryParameters.set('sortLocaleId', <any>sortLocaleId);
    }
    if (sortAscending !== undefined && sortAscending !== null) {
      queryParameters = queryParameters.set('sortAscending', <any>sortAscending);
    }
    if (localeId) {
      localeId.forEach((element) => {
        queryParameters = queryParameters.append('localeId', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<DictionaryEntryDto>>('get', `${this.basePath}/api/dictionary`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Updates dictionary entries.
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateEntries(
    body?: Array<DictionaryEntryPatchDto>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<DictionaryEntryDto>>;
  public updateEntries(
    body?: Array<DictionaryEntryPatchDto>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<DictionaryEntryDto>>>;
  public updateEntries(
    body?: Array<DictionaryEntryPatchDto>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<DictionaryEntryDto>>>;
  public updateEntries(
    body?: Array<DictionaryEntryPatchDto>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Array<DictionaryEntryDto>>('patch', `${this.basePath}/api/dictionary`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Updates an existing entry.
   *
   * @param body
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateEntry(
    body: DictionaryEntryPatchDto,
    id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DictionaryEntryDto>;
  public updateEntry(
    body: DictionaryEntryPatchDto,
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DictionaryEntryDto>>;
  public updateEntry(
    body: DictionaryEntryPatchDto,
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DictionaryEntryDto>>;
  public updateEntry(
    body: DictionaryEntryPatchDto,
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling updateEntry.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling updateEntry.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<DictionaryEntryDto>(
      'patch',
      `${this.basePath}/api/dictionary/${encodeURIComponent(String(id))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
