/**
 * i18n Tool
 * Web API of the i18n tool
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {AzureTranslatorConfigDto} from '../model/azureTranslatorConfigDto';
import {Body3Dto} from '../model/body3Dto';
import {ExternalTranslatorGenericRestConfigDto} from '../model/externalTranslatorGenericRestConfigDto';
import {GoogleTranslatorConfigDto} from '../model/googleTranslatorConfigDto';
import {ITranslateTranslatorConfigDto} from '../model/iTranslateTranslatorConfigDto';
import {InlineResponse200Dto} from '../model/inlineResponse200Dto';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';
import {ExternalTranslatorConfigDto} from "../model/externalTranslatorConfigDto";


@Injectable()
export class ExternalTranslatorService {

    protected basePath = 'http://127.0.0.1:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a configuration for Azure translator.
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAzureTranslatorConfig(body: AzureTranslatorConfigDto, observe?: 'body', reportProgress?: boolean): Observable<Body3Dto>;
    public createAzureTranslatorConfig(body: AzureTranslatorConfigDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Body3Dto>>;
    public createAzureTranslatorConfig(body: AzureTranslatorConfigDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Body3Dto>>;
    public createAzureTranslatorConfig(body: AzureTranslatorConfigDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createAzureTranslatorConfig.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Body3Dto>('post', `${this.basePath}/api/external-translator/azure`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a configuration for Google translator.
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGoogleTranslatorConfig(body: GoogleTranslatorConfigDto, observe?: 'body', reportProgress?: boolean): Observable<Body3Dto>;
    public createGoogleTranslatorConfig(body: GoogleTranslatorConfigDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Body3Dto>>;
    public createGoogleTranslatorConfig(body: GoogleTranslatorConfigDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Body3Dto>>;
    public createGoogleTranslatorConfig(body: GoogleTranslatorConfigDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createGoogleTranslatorConfig.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Body3Dto>('post', `${this.basePath}/api/external-translator/google`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a configuration for iTranslate.
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createITranslateConfig(body: ITranslateTranslatorConfigDto, observe?: 'body', reportProgress?: boolean): Observable<Body3Dto>;
    public createITranslateConfig(body: ITranslateTranslatorConfigDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Body3Dto>>;
    public createITranslateConfig(body: ITranslateTranslatorConfigDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Body3Dto>>;
    public createITranslateConfig(body: ITranslateTranslatorConfigDto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createITranslateConfig.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Body3Dto>('post', `${this.basePath}/api/external-translator/iTranslate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a translator configuration.
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTranslatorConfig(body: Body3Dto, observe?: 'body', reportProgress?: boolean): Observable<Body3Dto>;
    public createTranslatorConfig(body: Body3Dto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Body3Dto>>;
    public createTranslatorConfig(body: Body3Dto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Body3Dto>>;
    public createTranslatorConfig(body: Body3Dto, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createTranslatorConfig.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Body3Dto>('post', `${this.basePath}/api/external-translator`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes the configuration having the specified id
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delete4(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delete4(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delete4(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delete4(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling delete4.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.request<any>('delete', `${this.basePath}/api/external-translator/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all external translator configurations.
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAll5(observe?: 'body', reportProgress?: boolean): Observable<Array<ExternalTranslatorGenericRestConfigDto>>;
    public findAll5(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExternalTranslatorGenericRestConfigDto>>>;
    public findAll5(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExternalTranslatorGenericRestConfigDto>>>;
    public findAll5(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.request<Array<ExternalTranslatorGenericRestConfigDto>>('get', `${this.basePath}/api/external-translator`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the external translator configuration having the specified id.
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById4(id: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200Dto>;
    public findById4(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200Dto>>;
    public findById4(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200Dto>>;
    public findById4(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findById4.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [];

        return this.httpClient.request<InlineResponse200Dto>('get', `${this.basePath}/api/external-translator/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an external translator configuration.
     *
     * @param body
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update1(body: ExternalTranslatorConfigDto, id: string, observe?: 'body', reportProgress?: boolean): Observable<ExternalTranslatorConfigDto>;
    public update1(body: ExternalTranslatorConfigDto, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExternalTranslatorConfigDto>>;
    public update1(body: ExternalTranslatorConfigDto, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExternalTranslatorConfigDto>>;
    public update1(body: ExternalTranslatorConfigDto, id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling update1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ExternalTranslatorConfigDto>('put', `${this.basePath}/api/external-translator/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
