/**
 * i18n Tool
 * Web API of the i18n tool
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { ErrorMessagesDto } from '../model/errorMessagesDto';
import { TranslationLocaleCreationDto } from '../model/translationLocaleCreationDto';
import { TranslationLocaleDto } from '../model/translationLocaleDto';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class TranslationLocaleService {
  protected basePath = 'http://127.0.0.1:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Creates a new translation locale.
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public create(
    body: TranslationLocaleCreationDto,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationLocaleDto>;
  public create(
    body: TranslationLocaleCreationDto,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationLocaleDto>>;
  public create(
    body: TranslationLocaleCreationDto,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationLocaleDto>>;
  public create(
    body: TranslationLocaleCreationDto,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling create.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<TranslationLocaleDto>('post', `${this.basePath}/api/translation/locale`, {
      body: body,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Deletes a translation locale.
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public delete1(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public delete1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public delete1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public delete1(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling delete1.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>(
      'delete',
      `${this.basePath}/api/translation/locale/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all translation locales that have been used so far.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findAll1(observe?: 'body', reportProgress?: boolean): Observable<Array<TranslationLocaleDto>>;
  public findAll1(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<TranslationLocaleDto>>>;
  public findAll1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TranslationLocaleDto>>>;
  public findAll1(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Array<TranslationLocaleDto>>('get', `${this.basePath}/api/translation/locale/`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns the registered locale.
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findById1(id: string, observe?: 'body', reportProgress?: boolean): Observable<TranslationLocaleDto>;
  public findById1(
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationLocaleDto>>;
  public findById1(
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationLocaleDto>>;
  public findById1(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findById1.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<TranslationLocaleDto>(
      'get',
      `${this.basePath}/api/translation/locale/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Updates an existing translation locale.
   *
   * @param body
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public update(
    body: TranslationLocaleDto,
    id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<TranslationLocaleDto>;
  public update(
    body: TranslationLocaleDto,
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<TranslationLocaleDto>>;
  public update(
    body: TranslationLocaleDto,
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<TranslationLocaleDto>>;
  public update(
    body: TranslationLocaleDto,
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling update.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling update.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<TranslationLocaleDto>(
      'put',
      `${this.basePath}/api/translation/locale/${encodeURIComponent(String(id))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
