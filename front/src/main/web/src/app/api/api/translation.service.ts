/**
 * i18n Tool
 * Web API of the i18n tool
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorMessagesDto } from '../model/errorMessagesDto';
import { TranslationDto } from '../model/translationDto';
import { TranslationUpdateDto } from '../model/translationUpdateDto';
import { TranslationsPageDto } from '../model/translationsPageDto';
import { TranslationsSearchRequestDto } from '../model/translationsSearchRequestDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TranslationService {

    protected basePath = 'http://127.0.0.1:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns translations of the workspace having the specified id.
     * 
     * @param body 
     * @param action 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchTranslations(body: TranslationsSearchRequestDto, action?: string, observe?: 'body', reportProgress?: boolean): Observable<TranslationsPageDto>;
    public searchTranslations(body: TranslationsSearchRequestDto, action?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TranslationsPageDto>>;
    public searchTranslations(body: TranslationsSearchRequestDto, action?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TranslationsPageDto>>;
    public searchTranslations(body: TranslationsSearchRequestDto, action?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling searchTranslations.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TranslationsPageDto>('post',`${this.basePath}/api/translation/do`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a particular translation.
     * 
     * @param bundleKeyId 
     * @param localeId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTranslation(bundleKeyId: string, localeId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<TranslationDto>;
    public updateTranslation(bundleKeyId: string, localeId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TranslationDto>>;
    public updateTranslation(bundleKeyId: string, localeId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TranslationDto>>;
    public updateTranslation(bundleKeyId: string, localeId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bundleKeyId === null || bundleKeyId === undefined) {
            throw new Error('Required parameter bundleKeyId was null or undefined when calling updateTranslation.');
        }

        if (localeId === null || localeId === undefined) {
            throw new Error('Required parameter localeId was null or undefined when calling updateTranslation.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/plain'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TranslationDto>('put',`${this.basePath}/api/translation/bundle-key/${encodeURIComponent(String(bundleKeyId))}/locale/${encodeURIComponent(String(localeId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates translations.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTranslations(body?: Array<TranslationUpdateDto>, observe?: 'body', reportProgress?: boolean): Observable<Array<TranslationDto>>;
    public updateTranslations(body?: Array<TranslationUpdateDto>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TranslationDto>>>;
    public updateTranslations(body?: Array<TranslationUpdateDto>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TranslationDto>>>;
    public updateTranslations(body?: Array<TranslationUpdateDto>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<TranslationDto>>('put',`${this.basePath}/api/translation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
